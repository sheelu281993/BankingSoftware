/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package PCCS;

import static PCCS.Adminpage.TabPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

public class AccountList extends javax.swing.JFrame {
Adminpage refAdminpageAcList=LoginPage.homepage;
PreparedStatement pstCustomer;
Statement stmCustomer;
int account_no;
String name;
String search=null;
int k=1;
boolean FLAG_MOUSE_EVENT=false;


    /**
     * Creates new form AccountList
     */
    public AccountList() {
        initComponents();
      setLocation(30,30); 
      
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commandPopupMenu = new javax.swing.JPopupMenu();
        ViewAccountMenuItem = new javax.swing.JMenuItem();
        CloseAccountMenuItem = new javax.swing.JMenuItem();
        individualLedgerMenuItem = new javax.swing.JMenuItem();
        LoanManageMenuItem = new javax.swing.JMenuItem();
        CloseMenuItem = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        refreshBt = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        searchBt = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        accountListTable = new javax.swing.JTable();

        commandPopupMenu.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        commandPopupMenu.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        ViewAccountMenuItem.setText("View Account");
        ViewAccountMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewAccountMenuItemActionPerformed(evt);
            }
        });
        commandPopupMenu.add(ViewAccountMenuItem);

        CloseAccountMenuItem.setText("Close Account");
        CloseAccountMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseAccountMenuItemActionPerformed(evt);
            }
        });
        commandPopupMenu.add(CloseAccountMenuItem);

        individualLedgerMenuItem.setText("Individual Legder");
        individualLedgerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                individualLedgerMenuItemActionPerformed(evt);
            }
        });
        commandPopupMenu.add(individualLedgerMenuItem);

        LoanManageMenuItem.setText("Loan Manage");
        LoanManageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoanManageMenuItemActionPerformed(evt);
            }
        });
        commandPopupMenu.add(LoanManageMenuItem);

        CloseMenuItem.setText("Exit");
        CloseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseMenuItemActionPerformed(evt);
            }
        });
        commandPopupMenu.add(CloseMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PCCS");
        setIconImage(new javax.swing.ImageIcon("PBIcon.png").getImage());

        jPanel1.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("Police Cooperative Credit Society Bilaspur");

        refreshBt.setText("Refresh");
        refreshBt.setToolTipText("Click here to refresh the list");
        refreshBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextField1.setToolTipText("search by Name and Account No");

        searchBt.setText("Search");
        searchBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        accountListTable.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        accountListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><body><B>Account No</b></body></htm>", "<html><body><B>Name</b></body></htm>", "<html><body><B>Designation</b></body></htm>", "<html><body><B>Batch No</b></body></htm>", "<html><body><B>DOB</b></body></htm>", "<html><body><B>Voucher No</b></body></htm>", "<html><body><B>Acct date</b></body></htm>", "<html><body><B>Address</b></body></htm>", "<html><body><B> Status</b></body></htm>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accountListTable.setToolTipText("Account List (PCCS)");
        accountListTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        accountListTable.setFillsViewportHeight(true);
        accountListTable.setRowHeight(30);
        accountListTable.setRowMargin(5);
        accountListTable.setSelectionBackground(new java.awt.Color(0, 255, 0));
        accountListTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        accountListTable.getTableHeader().setReorderingAllowed(false);
        accountListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                accountListTableMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(accountListTable);
        accountListTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (accountListTable.getColumnModel().getColumnCount() > 0) {
            accountListTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            accountListTable.getColumnModel().getColumn(1).setPreferredWidth(80);
            accountListTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            accountListTable.getColumnModel().getColumn(3).setPreferredWidth(40);
            accountListTable.getColumnModel().getColumn(4).setPreferredWidth(60);
            accountListTable.getColumnModel().getColumn(5).setPreferredWidth(50);
            accountListTable.getColumnModel().getColumn(6).setPreferredWidth(60);
            accountListTable.getColumnModel().getColumn(7).setPreferredWidth(200);
            accountListTable.getColumnModel().getColumn(8).setPreferredWidth(20);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchBt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshBt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(217, 217, 217))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 976, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshBt)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchBt)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoanManageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoanManageMenuItemActionPerformed
        // TODO add your handling code here:
        int row=accountListTable.getSelectedRow();
        refAdminpageAcList.account_noForLoanAManage=Integer.parseInt(accountListTable.getValueAt(row,0).toString());
        refAdminpageAcList.loanmanage=new LoanManage();
         try {
      refAdminpageAcList.loanmanage.getLoanInfo();
    } catch (SQLException e) {
        
    }
       
        refAdminpageAcList.LoanBt.setEnabled(false);
        TabPane.add(refAdminpageAcList.loanmanage);
        TabPane.setTabComponentAt(TabPane.getTabCount()-1,new ClosePanel(" Loan Manage",3));
        TabPane.setSelectedComponent(refAdminpageAcList.loanmanage);
        refAdminpageAcList.setVisible(true);
        LoanManageMenuItem.setEnabled(false);
        
          
    }//GEN-LAST:event_LoanManageMenuItemActionPerformed

    private void individualLedgerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_individualLedgerMenuItemActionPerformed
        // TODO add your handling code here:
        try{
        int row=accountListTable.getSelectedRow();
         refAdminpageAcList.account_no_IL=Integer.parseInt(accountListTable.getValueAt(row,0).toString());
        refAdminpageAcList.customerINDLEDGER=new IndividualLedgerDialog(this,true);
         Calendar cal=Calendar.getInstance();
          int CURRENT_YEAR=cal.get(Calendar.YEAR);
        int CURRENT_MONTH=cal.get(Calendar.MONTH);
        
        if(CURRENT_MONTH>=0 && CURRENT_MONTH<=2){
          refAdminpageAcList.customerINDLEDGER.FromDateTF.setText((CURRENT_YEAR-1)+"-04-01");
            refAdminpageAcList.customerINDLEDGER.ToDateTF.setText((CURRENT_YEAR)+"-03-31");
        }
        else
        {
           refAdminpageAcList.customerINDLEDGER.FromDateTF.setText((CURRENT_YEAR)+"-04-01");
            refAdminpageAcList.customerINDLEDGER.ToDateTF.setText((CURRENT_YEAR+1)+"-03-31");
        }
         
        refAdminpageAcList. customerINDLEDGER.getIndividualLedger();
        refAdminpageAcList. customerINDLEDGER.setVisible(true);
        }
        catch(NumberFormatException | SQLException e)
        {
            JOptionPane.showMessageDialog(this,"Error related to database","PCCS-ERROR",JOptionPane.ERROR_MESSAGE);
        }
    
    }//GEN-LAST:event_individualLedgerMenuItemActionPerformed

    private void ViewAccountMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewAccountMenuItemActionPerformed
        // TODO add your handling code here:
        int row=accountListTable.getSelectedRow();
         refAdminpageAcList.account_noForView=Integer.parseInt(accountListTable.getValueAt(row,0).toString());
         refAdminpageAcList.customer=new ViewAccount();
    try {
        refAdminpageAcList.customer.getAccountInfo();
    } catch (SQLException e) {
        
    }
         TabPane.add(refAdminpageAcList.customer);
         TabPane.setTabComponentAt(TabPane.getTabCount()-1,new ClosePanel("  View Account ",2));
         TabPane.setSelectedComponent(refAdminpageAcList.customer);
         refAdminpageAcList.ViewAcctBt.setEnabled(false);
          refAdminpageAcList.setVisible(true);
          ViewAccountMenuItem.setEnabled(false);
       
    }//GEN-LAST:event_ViewAccountMenuItemActionPerformed

    private void CloseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseMenuItemActionPerformed
        // TODO add your handling code here:
        refAdminpageAcList.acList.dispose();
    }//GEN-LAST:event_CloseMenuItemActionPerformed

    private void searchBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtActionPerformed
    search=jTextField1.getText();
        if(search.equals("")) 
        {
            k=1;
        }
        else 
        {
            k=0;
        }
        
        getAccountList();
          // TODO add your handling code here:
    }//GEN-LAST:event_searchBtActionPerformed

    private void refreshBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtActionPerformed
        // TODO add your handling code here:
        k=1;
        getAccountList();
    }//GEN-LAST:event_refreshBtActionPerformed

    private void accountListTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountListTableMouseReleased
        // TODO add your handling code here:
     
         if(evt.isPopupTrigger())
         {
                 int row=accountListTable.getSelectedRow();
                
        if(row!=(-1))
          {
      boolean status=Boolean.parseBoolean(""+accountListTable.getValueAt(row,8));
       
       if(!status)
       { CloseAccountMenuItem.setEnabled(false);}
       else
     {
          CloseAccountMenuItem.setEnabled(true);
       }
            commandPopupMenu.show(evt.getComponent(),evt.getX(),evt.getY());
        }
         }
         
         
         
         
      else
        {
           
        int row=accountListTable.getSelectedRow();
      boolean status=Boolean.parseBoolean(""+accountListTable.getValueAt(row,8));
      if(status)
      {
         accountListTable.setSelectionBackground(new java.awt.Color(0, 255,120)); 
         accountListTable.setToolTipText("Active Account");
      }
      else
      {
          accountListTable.setSelectionBackground(new java.awt.Color(255,150,20)); 
          accountListTable.setToolTipText("Closed Acount");
      }}
         
    }//GEN-LAST:event_accountListTableMouseReleased

    private void CloseAccountMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseAccountMenuItemActionPerformed
        // TODO add your handling code 
         int row=accountListTable.getSelectedRow();
    
          int temp_account_no=Integer.parseInt(""+accountListTable.getValueAt(row,0));
          CloseAccountDialog closeAcctDialog=new CloseAccountDialog(this,true);
          closeAcctDialog.setAccountInfo(temp_account_no);
          closeAcctDialog.setVisible(true);
        
    }//GEN-LAST:event_CloseAccountMenuItemActionPerformed
public void getAccountList()
    {
    ResultSet rs;
    String designation,batch_no,dob,voucher_no,doac,address;
    boolean status;
    Connection con=refAdminpageAcList.con;
        try{
            if(k==1)
            {
            stmCustomer=con.createStatement();
           rs=stmCustomer.executeQuery("select account_no,name,designation,batch_no,dob,voucher_no,doac,address,account_status from customer ");
            }
         else
            {
       PreparedStatement pstm=con.prepareStatement("select account_no,name,designation,batch_no,dob,voucher_no,doac,address,account_status from customer where account_no=? or name like ?");
       pstm.setString(1,search);
       search=search+"%";
       pstm.setString(2,search);
       rs=pstm.executeQuery();
            }
     DefaultTableModel tm=(DefaultTableModel)accountListTable.getModel();
              while(true)
              {
                  int c=tm.getRowCount();
                  if(c==0)
                      break;
                  else
                      tm.removeRow(0);
              }
         while(rs.next())
        {
               account_no=rs.getInt(1);
               name=rs.getString(2);
               designation=rs.getString(3);
               batch_no=rs.getString(4);
                dob=rs.getString(5);
                voucher_no=rs.getString(6);
                doac=rs.getString(7);
                 address=rs.getString(8);
                 status=rs.getBoolean(9);
               Object tb[]={account_no,name,designation,batch_no,dob,voucher_no,doac,address,status};
                tm.addRow(tb);
                
            
        }
         
        }
        catch(SQLException e)
        {
        }
        }
         
   
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CloseAccountMenuItem;
    private javax.swing.JMenuItem CloseMenuItem;
    javax.swing.JMenuItem LoanManageMenuItem;
    javax.swing.JMenuItem ViewAccountMenuItem;
    private javax.swing.JTable accountListTable;
    private javax.swing.JPopupMenu commandPopupMenu;
    private javax.swing.JMenuItem individualLedgerMenuItem;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton refreshBt;
    private javax.swing.JButton searchBt;
    // End of variables declaration//GEN-END:variables
}
