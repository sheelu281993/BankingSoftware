/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package PCCS;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.SpinnerDateModel;
import javax.swing.JSpinner;


public class DailyCashPyt extends javax.swing.JFrame {


 JFormattedTextField DateFTF;   /**
     * Creates new form DailyCashPyt
     */
    public DailyCashPyt() {
        initComponents();
        JSpinner.DateEditor editor=(JSpinner.DateEditor)dateSpinner.getEditor();
        DateFTF=editor.getTextField();
        setLocation(30,50);  
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        SpinnerDateModel model=new SpinnerDateModel(new Date(),null,null,Calendar.DAY_OF_YEAR);
        dateSpinner = new javax.swing.JSpinner(model);
        jLabel2 = new javax.swing.JLabel();
        jscrollpane1 = new javax.swing.JScrollPane();
        dailyCashPaymentTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PCCS");
        setIconImage(new javax.swing.ImageIcon("PBIcon.png").getImage());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("  Police Co-operative Credit Society Bilaspur ");

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setText("GetDCP");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        JSpinner.DateEditor editor=new JSpinner.DateEditor(dateSpinner,"yyyy-MM-dd");
        dateSpinner.setEditor(editor);
        dateSpinner.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        dateSpinner.setToolTipText("yyyy-mm-dd");
        dateSpinner.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Daily Cash Payment");

        jscrollpane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jscrollpane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        dailyCashPaymentTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        dailyCashPaymentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "<html><body color=blue><b>SI.NO</b></body></html>", "<html><body color=blue><b>Acct No</b></body></html>", "<html><body color=blue><b>Name</b></body></html>", "<html><body color=blue><b>Share Bal</b></body></html>", "<html><body color=blue><b>Share Int</b></body></html>", "<html><body color=blue><b>Total Sh.</b></body></html>", "<html><body color=blue><b>RD Bal</b></body></html>", "<html><body color=blue><b>RD Int</b></body></html>", "<html><body color=blue><b>Total RD</b></body></html>", "<html><body color=blue><b>Loan Wr.</b></body></html>", "<html><body color=blue><b>Total Amt</b></body></html>"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dailyCashPaymentTable.setRowHeight(25);
        jscrollpane1.setViewportView(dailyCashPaymentTable);
        if (dailyCashPaymentTable.getColumnModel().getColumnCount() > 0) {
            dailyCashPaymentTable.getColumnModel().getColumn(0).setPreferredWidth(20);
            dailyCashPaymentTable.getColumnModel().getColumn(1).setPreferredWidth(30);
            dailyCashPaymentTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            dailyCashPaymentTable.getColumnModel().getColumn(3).setPreferredWidth(40);
            dailyCashPaymentTable.getColumnModel().getColumn(4).setPreferredWidth(40);
            dailyCashPaymentTable.getColumnModel().getColumn(5).setPreferredWidth(40);
            dailyCashPaymentTable.getColumnModel().getColumn(6).setPreferredWidth(40);
            dailyCashPaymentTable.getColumnModel().getColumn(7).setPreferredWidth(40);
            dailyCashPaymentTable.getColumnModel().getColumn(8).setPreferredWidth(40);
            dailyCashPaymentTable.getColumnModel().getColumn(9).setPreferredWidth(40);
            dailyCashPaymentTable.getColumnModel().getColumn(10).setPreferredWidth(50);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(jLabel1)
                .addContainerGap(290, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jscrollpane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(432, 432, 432))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jscrollpane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    try {
        String date=DateFTF.getText().trim();
        // TODO add your handling code here:
        getDailyCashPayment(date);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null,"ERROR"+ex,"PCCS",JOptionPane.ERROR_MESSAGE); 
    }
    }//GEN-LAST:event_jButton1ActionPerformed
public  void getDailyCashPayment(String dateDCP) throws SQLException
{
     
      Connection con=LoginPage.homepage.con;
    PreparedStatement  pstDlyCsPmt=con.prepareStatement("create temporary table share_pay select share.account_no ,share.withdraw_amount \n" +
"as share_withdraw_amount from share\n" +
" where share.particulars=? and share.withdraw_amount is not null");
         pstDlyCsPmt.setString(1,dateDCP);
         pstDlyCsPmt.executeUpdate();
         pstDlyCsPmt=con.prepareStatement("create temporary table share_int_pay"
                 + " select share_interest.account_no ,share_interest.withdraw_interest\n" +
"as share_withdraw_interest from share_interest\n" +
" where share_interest.particulars=? and share_interest.withdraw_interest is not null");
          pstDlyCsPmt.setString(1,dateDCP);
         pstDlyCsPmt.executeUpdate();
          Statement      stmDailycashpay=con.createStatement();
           stmDailycashpay.executeUpdate("create temporary table temp_share_pay1\n" +
"select share_pay.account_no,share_pay.share_withdraw_amount,share_int_pay.share_withdraw_interest\n" +
"from share_pay left join share_int_pay on share_pay.account_no=share_int_pay.account_no");
           
          stmDailycashpay.executeUpdate("create temporary table temp_share_pay2\n" +
"select share_int_pay.account_no,share_pay.share_withdraw_amount,share_int_pay.share_withdraw_interest\n" +
"from share_pay right join share_int_pay on share_pay.account_no=share_int_pay.account_no");
          
          stmDailycashpay.executeUpdate("create temporary  table temp_share_pay\n" +
"(select * from temp_share_pay1)\n" +
"union\n" +
"(select * from temp_share_pay2)");
          
         pstDlyCsPmt=con.prepareStatement("create temporary table rd_pay  select rd.account_no ,rd.withdraw_amount as rd_withdraw_amount \n" +
"from rd \n" +
" where rd.particulars=? and rd.withdraw_amount is not null");
          pstDlyCsPmt.setString(1,dateDCP);
           pstDlyCsPmt.executeUpdate();
           pstDlyCsPmt=con.prepareStatement("create temporary table rd_int_pay  select rd_interest.account_no ,\n" +
"rd_interest.withdraw_interest as rd_withdraw_interest\n" +
"from rd_interest   \n" +
" where rd_interest.particulars=? and rd_interest.withdraw_interest is not null;"); 
           
             pstDlyCsPmt.setString(1,dateDCP);
           pstDlyCsPmt.executeUpdate();
           
          stmDailycashpay.executeUpdate("create temporary table temp_rd_pay1  select rd_pay.account_no ,rd_pay.rd_withdraw_amount ,\n" +
"rd_int_pay.rd_withdraw_interest \n" +
"from rd_pay left join rd_int_pay    on rd_pay.account_no=rd_int_pay.account_no "); 
           
           
           stmDailycashpay.executeUpdate("create temporary table temp_rd_pay2  select rd_int_pay.account_no ,rd_pay.rd_withdraw_amount ,\n" +
"rd_int_pay.rd_withdraw_interest \n" +
"from rd_pay right join rd_int_pay    on rd_pay.account_no=rd_int_pay.account_no ");
           
           
           
           
           
            stmDailycashpay.executeUpdate("create temporary  table temp_rd_pay\n" +
"(select * from temp_rd_pay1)\n" +
"union\n" +
"(select * from temp_rd_pay2) " );
            
            pstDlyCsPmt=con.prepareStatement("create temporary table temp_loan_pay select account_no ,withdraw_loan_amount  from loan_payment\n" +
"  where loan_payment.particulars=? and withdraw_loan_amount is not null");
             pstDlyCsPmt.setString(1,dateDCP);
           pstDlyCsPmt.executeUpdate();
     
      stmDailycashpay.executeUpdate("create temporary table temp_dailycashpayment1 select temp_share_pay.account_no,\n" +
"temp_share_pay.share_withdraw_amount ,temp_share_pay.share_withdraw_interest,\n" +
"temp_rd_pay.rd_withdraw_amount  ,temp_rd_pay.rd_withdraw_interest ,\n" +
"temp_loan_pay.withdraw_loan_amount \n" +
"from temp_share_pay left join   temp_rd_pay on temp_share_pay.account_no=temp_rd_pay.account_no left join  temp_loan_pay\n" +
"on temp_loan_pay.account_no=temp_share_pay.account_no");
      
      stmDailycashpay.executeUpdate("create temporary table temp_dailycashpayment2 select temp_rd_pay.account_no,temp_share_pay.share_withdraw_amount ,temp_share_pay.share_withdraw_interest,\n" +
"temp_rd_pay.rd_withdraw_amount  ,temp_rd_pay.rd_withdraw_interest ,\n" +
"temp_loan_pay.withdraw_loan_amount \n" +
"from temp_share_pay right join   temp_rd_pay on temp_share_pay.account_no=temp_rd_pay.account_no left join  temp_loan_pay\n" +
"on temp_loan_pay.account_no=temp_rd_pay.account_no");
      
      stmDailycashpay.executeUpdate("create temporary table temp_dailycashpayment3 select temp_loan_pay.account_no,temp_share_pay.share_withdraw_amount ,temp_share_pay.share_withdraw_interest,\n" +
"temp_rd_pay.rd_withdraw_amount  ,temp_rd_pay.rd_withdraw_interest ,\n" +
"temp_loan_pay.withdraw_loan_amount \n" +
"from temp_rd_pay right join   temp_loan_pay on temp_loan_pay.account_no=temp_rd_pay.account_no left join  temp_share_pay\n" +
"on temp_loan_pay.account_no=temp_share_pay.account_no");
      
        stmDailycashpay.executeUpdate("create temporary  table temp_dailycashpayment\n" +
"(select * from temp_dailycashpayment1)\n" +
"union\n" +
"(select * from temp_dailycashpayment2)\n" +
"union\n" +
"(select * from temp_dailycashpayment3)");
       
        
     ResultSet rs= stmDailycashpay.executeQuery("select customer.name,temp_dailycashpayment.account_no,\n" +
"temp_dailycashpayment.share_withdraw_amount ,\n" +
"temp_dailycashpayment.share_withdraw_interest ,\n" +
"temp_dailycashpayment.rd_withdraw_amount ,\n" +
"temp_dailycashpayment.rd_withdraw_interest ,\n" +
"temp_dailycashpayment.withdraw_loan_amount\n" +
"from temp_dailycashpayment  \n" +
"inner join customer using(account_no)");
     
    DefaultTableModel tmDCP=(DefaultTableModel)dailyCashPaymentTable.getModel();
              while(true)
              {
                  int c=tmDCP.getRowCount();
                  if(c==0)
                      break;
                  else
                      tmDCP.removeRow(0);
              }
           int   SI_NO=0;
         while(rs.next())
        {
             int  account_no=rs.getInt(2);
             String  name=rs.getString(1);
              int share_with=rs.getInt(3);
               int share_int=rs.getInt(4);
               int share_total=share_with+share_int;
               int rd_with=rs.getInt(5);
               int rd_int=rs.getInt(6);
               int rd_total=rd_with+rd_int;
                 int loan_with_amt=rs.getInt(7);
               int total_paid_amount=share_total+rd_total+loan_with_amt;
                SI_NO++;
               Object tb[]={SI_NO,account_no,name,share_with,share_int,share_total,rd_with,rd_int,rd_total,loan_with_amt ,total_paid_amount};
                tmDCP.addRow(tb);
            
        }
         
          rs.close();
         rs= stmDailycashpay.executeQuery("select sum(share_withdraw_amount)"
                 + ",sum(share_withdraw_interest),sum(rd_withdraw_amount),sum(rd_withdraw_interest),"
                 + "sum(withdraw_loan_amount) from temp_dailycashpayment");
        
         if(rs.next())
         {   Object nullOb[]={};
             tmDCP.addRow(nullOb);
            
            int TOTAL_SHARE=rs.getInt(1);
               int TOTAL_SHARE_INT=rs.getInt(2);
               int TOTAL_SHARE_AMT=TOTAL_SHARE+TOTAL_SHARE_INT;
             int TOTAL_RD=rs.getInt(3);
               int TOTAL_RD_INT=rs.getInt(4);
               int TOTAL_RD_AMT=TOTAL_RD+TOTAL_RD_INT;
             int TOTAL_LOAN=rs.getInt(5);
             int TOTAL_AMT_PAID=TOTAL_LOAN+TOTAL_RD_AMT+TOTAL_SHARE_AMT;
            int i= tmDCP.getRowCount();
            
            Object tb[]={ null,"<html><body bgcolor=yellow><b>TOTAL</b></body></html>",
                "<html><body bgcolor=yellow><b>Date: "+dateDCP+"</b></body></html>",
               "<html><body bgcolor=yellow><b>"+ TOTAL_SHARE+"</b></body></html>",
                 "<html><body bgcolor=yellow><b>"+ TOTAL_SHARE_INT+"</b></body></html>",
                  "<html><body bgcolor=yellow><b>"+ TOTAL_SHARE_AMT+"</b></body></html>",
                 "<html><body bgcolor=yellow><b>"+ TOTAL_RD+"</b></body></html>",
                "<html><body bgcolor=yellow><b>"+ TOTAL_RD_INT+"</b></body></html>",
                  "<html><body bgcolor=yellow><b>"+ TOTAL_RD_AMT+"</b></body></html>",
                  "<html><body bgcolor=yellow><b>"+ TOTAL_LOAN+"</b></body></html>",
                "<html><body bgcolor=yellow><b>"+ TOTAL_AMT_PAID+"</b></body></html>"};
             tmDCP.addRow(tb);
         }
         rs.close();
         stmDailycashpay.executeUpdate("drop temporary table share_pay,share_int_pay,temp_share_pay1,"
                 + "temp_share_pay2,rd_pay,rd_int_pay,temp_share_pay,temp_rd_pay,temp_rd_pay1,temp_rd_pay2,"
                 + "temp_loan_pay,temp_dailycashpayment1,temp_dailycashpayment2,temp_dailycashpayment3,"
             + "temp_dailycashpayment");
  pstDlyCsPmt.close();
  stmDailycashpay.close();

}
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable dailyCashPaymentTable;
    private javax.swing.JSpinner dateSpinner;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jscrollpane1;
    // End of variables declaration//GEN-END:variables
}
