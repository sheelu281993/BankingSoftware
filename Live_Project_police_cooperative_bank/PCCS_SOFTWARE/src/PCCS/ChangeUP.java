/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PCCS;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;


public class ChangeUP extends javax.swing.JDialog {

    /**
     * Creates new form ChangeUP
     * @param parent
     * @param modal
     */
    String UserName,Password;
    Connection con;
    public ChangeUP(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
         setLocation(40,40); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mpTF = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        activateBt = new javax.swing.JButton();
        updatePanel = new javax.swing.JPanel();
        updateBT = new javax.swing.JButton();
        passTF = new javax.swing.JTextField();
        userTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        selectCB = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PCCS-Change User");
        setIconImage(new javax.swing.ImageIcon("PBIcon.png").getImage());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Enter the Master Password");

        activateBt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        activateBt.setForeground(new java.awt.Color(255, 51, 51));
        activateBt.setText("Activate");
        activateBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateBtActionPerformed(evt);
            }
        });

        updatePanel.setEnabled(false);

        updateBT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        updateBT.setText("Update");
        updateBT.setEnabled(false);
        updateBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTActionPerformed(evt);
            }
        });

        passTF.setEditable(false);

        userTF.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("User Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Password");

        selectCB.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        selectCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "User Name", "Password" }));
        selectCB.setEnabled(false);
        selectCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout updatePanelLayout = new javax.swing.GroupLayout(updatePanel);
        updatePanel.setLayout(updatePanelLayout);
        updatePanelLayout.setHorizontalGroup(
            updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updatePanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(53, 53, 53)
                .addGroup(updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passTF, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userTF, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(selectCB, 0, 98, Short.MAX_VALUE)
                    .addComponent(updateBT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36))
        );
        updatePanelLayout.setVerticalGroup(
            updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updatePanelLayout.createSequentialGroup()
                .addGap(0, 16, Short.MAX_VALUE)
                .addGroup(updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectCB, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(userTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(23, 23, 23)
                .addGroup(updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(updateBT))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(updatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(194, 194, 194))))
            .addGroup(layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(mpTF, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(activateBt, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mpTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activateBt))
                .addGap(18, 18, 18)
                .addComponent(updatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void activateBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateBtActionPerformed
        // TODO add your handling code here:
        
        char []mpass=mpTF.getPassword();
        String PASS=new String(mpass);

       con =Connectivity.connectDatabase("root",PASS);
        if(con!=null)
        {
          
         selectCB.setEnabled(true);
          activateBt.setForeground(Color.GREEN);
          activateBt.setEnabled(false);
          mpTF.setEditable(false);
          
           PreparedStatement pstm_update;
            try {
                pstm_update=con.prepareStatement("select info from pccs_ainfo where ainfo_type=? ");
                pstm_update.setString(1,"USER");
               ResultSet rs= pstm_update.executeQuery();
               if(rs.next())
               {
                   UserName=rs.getString(1);
                   userTF.setText(UserName);
               }
               pstm_update.close();
               rs.close();
                pstm_update=con.prepareStatement("select info from pccs_ainfo where ainfo_type=? ");
                pstm_update.setString(1,"PASS");
               rs= pstm_update.executeQuery();
               if(rs.next())
               {
                   Password=rs.getString(1);
                   passTF.setText(Password);
               }
                  pstm_update.close();
               rs.close();
               selectCB.setSelectedIndex(0);
            } catch (SQLException ex) {
              JOptionPane.showMessageDialog(this,"Error Related to database!","PCCS-ERROR",JOptionPane.ERROR_MESSAGE);  
            }
        
         }
      
                
    }//GEN-LAST:event_activateBtActionPerformed

    private void selectCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCBActionPerformed
        // TODO add your handling code here:
        if(selectCB.getSelectedIndex()==1)
        {
             passTF.setText(Password);
            userTF.setEditable(true);
            updateBT.setEnabled(true);
            passTF.setEditable(false);
        }
        if(selectCB.getSelectedIndex()==2)
        {    userTF.setText(UserName);  
            userTF.setEditable(false);
            passTF.setEditable(true);
            updateBT.setEnabled(true);
        }
         if(selectCB.getSelectedIndex()==0)
        {
            userTF.setText(UserName);
            passTF.setText(Password);
            userTF.setEditable(false);
            passTF.setEditable(false);
            updateBT.setEnabled(false);
        }
    }//GEN-LAST:event_selectCBActionPerformed

    private void updateBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBTActionPerformed
        // TODO add your handling code here:
         int CONFIRMATION_CHECK= JOptionPane.showConfirmDialog(this,"Are you sure you want to update \n\tUsername/Password ?","PCCS",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(CONFIRMATION_CHECK==0)
        {
        Statement stmUP;
         PreparedStatement     pstm_update;
        String newUN=userTF.getText().trim();
        String newPass=passTF.getText().trim();
         int   FLAG_CU=1;
         try 
         {   stmUP = con.createStatement();
             if(selectCB.getSelectedIndex()==1)
             {
             if(!newUN.equals(UserName))
             {
           FLAG_CU=stmUP.executeUpdate("create user \'"+newUN+"\' identified by \'"+newPass+"\'");
              if(FLAG_CU==0)
              {
          pstm_update  =con.prepareStatement("update pccs_ainfo set info=? where ainfo_type=? ");
                pstm_update.setString(2,"USER");
                pstm_update.setString(1,newUN);
                pstm_update.executeUpdate();
                pstm_update.close();
              pstm_update=con.prepareStatement("update pccs_ainfo set info=? where ainfo_type=? ");
                pstm_update.setString(2,"PASS");
                pstm_update.setString(1,newPass);
                pstm_update.executeUpdate();
                pstm_update.close();
                  stmUP.execute("drop user "+UserName); 
                   stmUP.execute("grant all on pccs.* to \'"+newUN+"\'");
                  stmUP.close();
                  con.close();
                   JOptionPane.showMessageDialog(this,"Successfully Updated Username!","PCCS-ChangeU|P",JOptionPane.INFORMATION_MESSAGE);
                  activateBt.setForeground(Color.red);
                  activateBt.setEnabled(true);
                  mpTF.setEditable(true);
                  mpTF.setText("");
                  selectCB.setEnabled(false);
                  updateBT.setEnabled(false);
                  userTF.setText(newUN);
                  userTF.setEditable(false);
                  passTF.setEditable(false);
                       

              }
             }
              else
             {
                JOptionPane.showMessageDialog(this,"UserName is not Updated !","PCCS-ChangeU|P",JOptionPane.INFORMATION_MESSAGE);   
             }
              }
            
              if(selectCB.getSelectedIndex()==2 )
             {
                 if(!newPass.equals(Password))
                 {
                 stmUP.execute("SET PASSWORD FOR '"+newUN+"'= PASSWORD('"+newPass+"')");
               pstm_update=con.prepareStatement("update pccs_ainfo set info=? where ainfo_type=? ");
                pstm_update.setString(2,"PASS");
                pstm_update.setString(1,newPass);
                pstm_update.executeUpdate();
                pstm_update.close(); 
                JOptionPane.showMessageDialog(this,"Successfully Updated Password !","PCCS-ChangeU|P",JOptionPane.INFORMATION_MESSAGE);
                    selectCB.setEnabled(false);
                  updateBT.setEnabled(false);
                  userTF.setEditable(false);
                  passTF.setEditable(false);
                   activateBt.setForeground(Color.red);
                  activateBt.setEnabled(true);
                  mpTF.setEditable(true);
                  mpTF.setText("");
                  passTF.setText(newPass);
                          

                 }
               else
             {
                JOptionPane.showMessageDialog(this,"Password is not Updated !","PCCS-ChangeU|P",JOptionPane.INFORMATION_MESSAGE);   
                     }
             }
     
         
            
         }
         catch (SQLException ex) {
           if(FLAG_CU==1)
            {
                JOptionPane.showMessageDialog(this,"Invalid Username !","PCCS-ERROR",JOptionPane.ERROR_MESSAGE);
            }
        }
        
        }
    }//GEN-LAST:event_updateBTActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activateBt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField mpTF;
    private javax.swing.JTextField passTF;
    private javax.swing.JComboBox selectCB;
    private javax.swing.JButton updateBT;
    private javax.swing.JPanel updatePanel;
    private javax.swing.JTextField userTF;
    // End of variables declaration//GEN-END:variables
}
